{"version":3,"sources":["Helper/ApiCalls.js","Reducers/WeatherInfoSlice.js","Icons/amcharts_weather_icons/animated/rainy-5.svg","Icons/amcharts_weather_icons/animated/thunder.svg","Icons/amcharts_weather_icons/animated/rainy-1.svg","Icons/amcharts_weather_icons/animated/snowy-5.svg","Icons/amcharts_weather_icons/animated/day.svg","Icons/amcharts_weather_icons/animated/cloudy-day-1.svg","Helper/HelperFunctions.tsx","Components/SearchBar.tsx","Components/DailyInfo.tsx","Components/WeatherInfo.tsx","App.js","app/store.js","index.js"],"names":["getCityInfoSevenDay","lat","long","fetch","then","res","json","weatherInfoSlice","createSlice","name","initialState","weatherInfo","hasDetailedData","reducers","addWeatherInfo","state","action","payload","actions","getWeatherInfo","getWeatherInfoBool","getWeatherDayInfo","data","dayString","Date","dt","toUTCString","dayOfWeek","slice","date","weather","main","temp","Math","round","day","weatherToIcon","icon","src","thunder","height","alt","drizzle","rainy","snow","clear","clouds","CitySearchBar","dispatch","useDispatch","useState","cityName","setCityName","error","setError","zipCountry","setZipcode","className","onSubmit","e","preventDefault","city","convertCityToCoord","toFixed","lon","coord","description","current","currentTemp","feels_like","minTemp","daily","min","maxTemp","max","windSpd","wind_speed","precipitation","undefined","rain","humidity","dailyInfo","i","push","catch","TextField","placeholder","label","value","onChange","target","type","strSplit","split","zipcode","countryCode","country","convertZipcodeToCoord","searchZipCode","DailyInfo","props","WeatherInfo","cityWeatherInfo","useSelector","toUpperCase","substring","map","dailyData","index","App","store","configureStore","reducer","WeatherInfoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cec195f.chunk.js","sourcesContent":["//converts city name to lat long for use in api call\r\nexport function convertCityToCoord(cityName) {\r\n    return fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${cityName}&limit=1&appid=c5bc463716cbbe021b14ac41ed34c9de`)\r\n        .then(res => res.json())\r\n}\r\n\r\n//converts zip code to lat long for use in api call\r\nexport function convertZipcodeToCoord(zipcode, country) {\r\n    return fetch(`https://api.openweathermap.org/geo/1.0/zip?zip=${zipcode},${country}&appid=c5bc463716cbbe021b14ac41ed34c9de`)\r\n        .then(res => res.json())\r\n}\r\n\r\n//fetches 7 days worth of weather data for a given city name\r\nexport function getCityInfoSevenDay(lat, long) {\r\n    return fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=minutely,hourly,alerts&units=metric&appid=c5bc463716cbbe021b14ac41ed34c9de`)\r\n        .then(res => res.json())\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState= {\r\n    weatherInfo: {},\r\n    hasDetailedData: false,\r\n};\r\n\r\n\r\nexport const weatherInfoSlice = createSlice({\r\n    name: 'weatherInfo',\r\n    initialState,\r\n\r\n   reducers: {\r\n       addWeatherInfo: (state, action) => {\r\n           state.weatherInfo = action.payload;\r\n           state.hasDetailedData = true;\r\n       }\r\n   },\r\n    \r\n});\r\n\r\nexport const { addWeatherInfo } = weatherInfoSlice.actions;\r\n\r\nexport const getWeatherInfo = (state) => state.weatherInfo.weatherInfo;\r\n\r\nexport const getWeatherInfoBool = (state) => state.hasDetailedData.hasDetailedData;\r\n\r\nexport default weatherInfoSlice.reducer;\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/rainy-5.33279b1e.svg\";","export default __webpack_public_path__ + \"static/media/thunder.9d4b81cc.svg\";","export default __webpack_public_path__ + \"static/media/rainy-1.b4604865.svg\";","export default __webpack_public_path__ + \"static/media/snowy-5.8e307665.svg\";","export default __webpack_public_path__ + \"static/media/day.e170f8f7.svg\";","export default __webpack_public_path__ + \"static/media/cloudy-day-1.c6120cb4.svg\";","import rainy from '../Icons/amcharts_weather_icons/animated/rainy-5.svg';\r\nimport thunder from '../Icons/amcharts_weather_icons/animated/thunder.svg';\r\nimport drizzle from '../Icons/amcharts_weather_icons/animated/rainy-1.svg';\r\nimport snow from '../Icons/amcharts_weather_icons/animated/snowy-5.svg';\r\nimport clear from '../Icons/amcharts_weather_icons/animated/day.svg';\r\nimport clouds from '../Icons/amcharts_weather_icons/animated/cloudy-day-1.svg';\r\n\r\n//creates data structure for a single day which includes date, day of week, temp, and weather.\r\nexport function getWeatherDayInfo(data: any): object {\r\n    let date = new Date(data.dt * 1000);\r\n    let dayString = date.toUTCString();\r\n\r\n    let dayInfo = {\r\n        dayOfWeek: dayString.slice(0,3),\r\n        date: dayString.slice(5,7),\r\n        weather: data.weather[0].main,\r\n        temp: (Math.round(data.temp.day) + \"C\")\r\n    }\r\n    return dayInfo;\r\n}\r\n\r\n// displays an icon corresponding to the weather passed in as the argument.\r\nexport function weatherToIcon(weather: string): JSX.Element {\r\n    let icon;\r\n    switch(weather) {\r\n        case \"Thunderstorm\":\r\n            icon = <img src={thunder} height=\"100%\" alt=\"thunder icon\" />\r\n            break;\r\n        case \"Drizzle\":\r\n            icon = <img src={drizzle} height=\"100%\" alt =\"drizzle icon\"/>\r\n            break;\r\n        case \"Rain\":\r\n            icon  = <img src={rainy} height=\"100%\" alt=\"rainy icon\"/>\r\n            break;\r\n        case \"Snow\":\r\n            icon = <img src={snow} height=\"100%\" alt=\"snowy icon\"/>\r\n            break;\r\n        case \"Clear\":\r\n            icon = <img src={clear} height=\"100%\" alt=\"clear icon\"/>\r\n            break;\r\n        case \"Clouds\":\r\n            icon = <img src={clouds} height=\"100%\" alt=\"cloudy icon\"/>\r\n            break;\r\n        default:\r\n            //display the weather condition for specific conditions that don't have available svg icons.\r\n            icon = <p>{weather}</p>;\r\n            break;\r\n    }\r\n    return icon;\r\n}","import { useDispatch } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport { convertCityToCoord, convertZipcodeToCoord, getCityInfoSevenDay } from '../Helper/ApiCalls';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { TextField } from '@material-ui/core';\r\nimport '../style/searchBar.css';\r\nimport { addWeatherInfo } from '../Reducers/WeatherInfoSlice';\r\nimport { getWeatherDayInfo } from '../Helper/HelperFunctions';\r\n\r\nexport function CitySearchBar(): JSX.Element {\r\n\r\n    const dispatch = useDispatch();\r\n    const [cityName, setCityName] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n    const [zipCountry, setZipcode] = useState(\"\");\r\n    \r\n    return (\r\n        <div className=\"searchBar_container\">\r\n            <form onSubmit={handleCitySubmit} className=\"add_city_form\">\r\n                <TextField className=\"search_city_textarea textarea\" placeholder=\"Example: toronto\" label=\"city name\"value={cityName} onChange={handleCityChange}/>\r\n                <button type=\"submit\" className=\"add_city_btn\"><AddIcon /></button>\r\n            </form>\r\n\r\n            <form onSubmit={handleZipcodeSubmit} className=\"add_city_form\">\r\n                <TextField \r\n                    className=\"search_zipcode_textarea textarea\" \r\n                    placeholder=\"Example: a2c,ca\" \r\n                    label=\"zipcode, country code\"\r\n                    value={zipCountry} \r\n                    onChange={handleZipcodeChange} \r\n                />\r\n                <button type=\"submit\" className=\"add_city_btn\"> <AddIcon /> </button>\r\n            </form>\r\n\r\n            <p className={error ? 'show_error' : 'hide_error'}>Invalid city or zipcode country code combination. Please enter a valid input</p>\r\n        </div>\r\n    );\r\n\r\n    function handleCityChange(e: any) {\r\n        setCityName(e.target.value);\r\n    }\r\n\r\n    function handleZipcodeChange(e: any) {\r\n        setZipcode(e.target.value);\r\n    }\r\n\r\n    function handleCitySubmit(e: any) {\r\n        e.preventDefault();\r\n        searchCity(cityName);\r\n    }\r\n\r\n    function handleZipcodeSubmit(e: any) {\r\n        e.preventDefault();\r\n        searchZipCode(zipCountry);\r\n    }\r\n    \r\n    function searchCity (city: string) {\r\n        convertCityToCoord(city).then((data) => {\r\n            const lat = data[0].lat.toFixed(2);\r\n            const lon = data[0].lon.toFixed(2);\r\n            const coord = {\r\n                lat: lat,\r\n                lon: lon\r\n            };\r\n\r\n            return coord;\r\n        })\r\n        .then(coord => {\r\n            getCityInfoSevenDay(coord.lat, coord.lon).then((data) => {\r\n                let weatherInfo: any = {\r\n                    description: data.current.weather[0].description,\r\n                    currentTemp: data.current.feels_like + \"C\",\r\n                    minTemp: data.daily[0].temp.min + \"C\",\r\n                    maxTemp: data.daily[0].temp.max + \"C\",\r\n                    windSpd: data.current.wind_speed,\r\n                    precipitation: (data.daily[0].rain == undefined) ? 0 : data.daily[0].rain,\r\n                    humidity:data.current.humidity,\r\n                    dailyInfo: [],\r\n                }\r\n                \r\n                for(let i=1; i<8; i++) {\r\n                    weatherInfo.dailyInfo.push(getWeatherDayInfo(data.daily[i]));    \r\n                }\r\n                \r\n                setError(false);\r\n                dispatch(addWeatherInfo(weatherInfo));\r\n            })\r\n            .catch(error => setError(true));\r\n            \r\n        })\r\n        .catch(error => setError(true));\r\n\r\n    }\r\n\r\n    function searchZipCode(zipCountry: string) {\r\n        const strSplit = zipCountry.split(\",\");\r\n        const zipcode = strSplit[0];\r\n        const countryCode = strSplit[1];\r\n\r\n        convertZipcodeToCoord(zipcode, countryCode).then(data => {\r\n            const lat = data.lat.toFixed(2);\r\n            const lon = data.lon.toFixed(2);\r\n\r\n            const coord={\r\n                lat:lat,\r\n                lon:lon\r\n            };\r\n\r\n            return coord;\r\n        })\r\n        .then(coord => {\r\n            getCityInfoSevenDay(coord.lat, coord.lon).then((data) => {\r\n                let weatherInfo: any = {\r\n                    description: data.current.weather[0].description,\r\n                    currentTemp: data.current.feels_like,\r\n                    minTemp: data.daily[0].temp.min,\r\n                    maxTemp: data.daily[0].temp.max,\r\n                    windSpd: data.current.wind_speed,\r\n                    precipitation:data.daily[0].rain,\r\n                    humidity:data.current.humidity,\r\n                    dailyInfo: [],\r\n                }\r\n\r\n                for(let i=1; i<8; i++) {\r\n                    weatherInfo.dailyInfo.push(getWeatherDayInfo(data.daily[i]));    \r\n                }\r\n                \r\n                setError(false);\r\n                dispatch(addWeatherInfo(weatherInfo));\r\n               \r\n            })\r\n            .catch(error => setError(true));\r\n        })\r\n        .catch(error => setError(true));\r\n    }\r\n}","import { weatherToIcon } from '../Helper/HelperFunctions';\r\nimport '../style/dailyInfo.css';\r\n\r\nexport function DailyInfo(props: any): JSX.Element {\r\n\r\n    const dailyInfo = props.dailyInfo;\r\n    \r\n    return(\r\n        <div className=\"daily_weather_info\">\r\n            <div>{dailyInfo.date}</div>\r\n            <div>{dailyInfo.dayOfWeek}</div>\r\n            <div> { weatherToIcon(dailyInfo.weather) } </div>\r\n            <div>{dailyInfo.temp}</div>\r\n        </div>\r\n    )\r\n}","import { useSelector } from 'react-redux';\r\nimport { getWeatherInfo, getWeatherInfoBool } from '../Reducers/WeatherInfoSlice';\r\nimport { DailyInfo } from './DailyInfo';\r\nimport '../style/weatherInfo.css';\r\n\r\nexport function WeatherInfo(): JSX.Element {\r\n\r\n    const cityWeatherInfo = useSelector(getWeatherInfo);\r\n    const hasDetailedData = useSelector(getWeatherInfoBool);\r\n\r\n    // conditional render for when there is detailed data and when there isn't detailed data to render.\r\n    if(!hasDetailedData) {\r\n        return(\r\n            <div className=\"weather_info_container\"></div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"weather_info_container\">\r\n                <div className=\"detailed_city\">\r\n                    <div className=\"detailed_city_info\">\r\n                        <p>Current Temperature: {cityWeatherInfo.currentTemp}</p>\r\n                        <p>Min Temperature: {cityWeatherInfo.minTemp}</p>\r\n                        <p>Max Temperature: {cityWeatherInfo.maxTemp}</p>\r\n                        <p>Weather: {cityWeatherInfo.description[0].toUpperCase() + cityWeatherInfo.description.substring(1)}</p>\r\n                        <p>Wind Speed: {cityWeatherInfo.windSpd}</p>\r\n                        <p>Precipitation: {cityWeatherInfo.precipitation}</p>\r\n                        <p>Humidity: {cityWeatherInfo.humidity}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"daily_weather_data\">\r\n                    {\r\n                        cityWeatherInfo.dailyInfo.map((dailyData: object, index: number) => {\r\n                            return (<DailyInfo key={index} dailyInfo={dailyData}/>)\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { CitySearchBar } from './Components/SearchBar.tsx';\r\nimport { WeatherInfo } from './Components/WeatherInfo.tsx';\r\nimport './style/app.css'\r\n\r\nfunction App() {\r\n  return(\r\n    <div className=\"App\">\r\n      <CitySearchBar />\r\n      <WeatherInfo />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport WeatherInfoReducer from '../Reducers/WeatherInfoSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    weatherInfo: WeatherInfoReducer,\r\n    hasDetailedData:WeatherInfoReducer,\r\n  },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport './style/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}