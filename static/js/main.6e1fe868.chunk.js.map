{"version":3,"sources":["Reducers/CityListSlice.js","Helper/ApiCalls.js","Components/SearchBar.js","Reducers/WeatherInfoSlice.js","Icons/amcharts_weather_icons/animated/rainy-5.svg","Icons/amcharts_weather_icons/animated/thunder.svg","Icons/amcharts_weather_icons/animated/rainy-1.svg","Icons/amcharts_weather_icons/animated/snowy-5.svg","Icons/amcharts_weather_icons/animated/day.svg","Icons/amcharts_weather_icons/animated/cloudy-day-1.svg","Helper/HelperFunctions.js","Components/CitySimpleData.js","Components/CityList.js","Components/DailyInfo.js","Components/WeatherInfo.js","App.js","app/store.js","index.js"],"names":["cityListSlice","createSlice","name","initialState","cityList","reducers","addCity","state","action","length","pop","cityNameList","map","city","includes","payload","index","indexOf","splice","refreshCityData","removeCity","removeAll","actions","getCityList","cities","getCityInfo","cityName","fetch","then","res","json","getCityInfoFiveDay","CitySearchBar","dispatch","useDispatch","useState","setCityName","error","setError","className","onSubmit","e","preventDefault","data","cityData","weather","main","temperature","Math","round","temp","catch","type","size","value","onChange","target","placeholder","weatherInfoSlice","weatherInfo","hasDetailedData","addWeatherInfo","getWeatherInfo","getWeatherInfoBool","getWeatherDayInfo","dayString","Date","dt","toUTCString","dayOfWeek","slice","date","day","weatherToIcon","icon","src","thunder","height","alt","drizzle","rainy","snow","clear","clouds","CitySimpleData","props","Button","onClick","newData","currentTemp","list","currentWeather","description","wind","speed","deg","pressure","dailyWeatherData","i","push","getCityDetailedInfo","style","justifyContent","backgroundColor","fontSize","disableRipple","remove","CityList","useSelector","DailyInfo","dailyInfo","WeatherInfo","cityWeatherInfo","toUpperCase","substring","dailyData","App","store","configureStore","reducer","cityListReducer","WeatherInfoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e1fe868.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState= {\r\n    cityList:[],\r\n};\r\n\r\nexport const cityListSlice = createSlice({\r\n\r\n    name: 'searchBar',\r\n    initialState,\r\n\r\n   reducers: {\r\n       //adds a city with its basic info: name, weather, temperature to the store as an object.\r\n       addCity: (state, action) => {\r\n           //checks to see if the length of the list is already full at 8 items or not.\r\n            if(state.cityList.length >= 8) {\r\n                state.cityList.pop();\r\n            }\r\n\r\n            //takes into account duplicate cities\r\n            let cityNameList = state.cityList.map(city => city.name);\r\n            \r\n            if(cityNameList.includes(action.payload.name)) { //checks to see if the city thats to be added already exists or not.\r\n                let index = cityNameList.indexOf(action.payload.name);\r\n                state.cityList.splice(index, 1, action.payload);\r\n            } else { //the city to be added doesn't already exist in the list.\r\n                state.cityList.splice(0,0,action.payload);\r\n            }\r\n\r\n        },\r\n\r\n        //refreshes the data for a given city by replacing the city object with a new city object of the same city.\r\n        refreshCityData: (state, action) => {\r\n            let cityNameList = state.cityList.map(city => city.name);\r\n            let index = cityNameList.indexOf(action.payload.name); //finds the index of the given city in the store array.\r\n            state.cityList.splice(index, 1, action.payload);\r\n        },\r\n\r\n        //removes a given city from the store\r\n        removeCity: (state, action) => {\r\n            //first way of implementation where I pass in a filtered arrray without the city in question and set state as that new array\r\n            // state = action.payload;\r\n\r\n            //second implementation where I do the filtering here and only pass the city in question in.\r\n            let cityNameList = state.cityList.map(city => city.name);\r\n            let index = cityNameList.indexOf(action.payload.name); //finds the index of the given city in the store array.\r\n            state.cityList.splice(index, 1);\r\n        },\r\n\r\n        //removes all cities from the store\r\n        removeAll: (state) => {\r\n            state.cityList = [];\r\n        }\r\n   },\r\n});\r\n\r\nexport const { addCity, removeCity, removeAll, refreshCityData } = cityListSlice.actions;\r\n\r\nexport const getCityList = (state) => state.cities.cityList;\r\n\r\nexport default cityListSlice.reducer;","//fetches a single day's worth of weather data for a given city name\r\nexport function getCityInfo(cityName){\r\n    return fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=c51223c219d6aec8cb8c5210449bd859`)\r\n        .then(res => res.json())\r\n}\r\n\r\n//fetches 5 days worth of weather data for a given city name\r\nexport function getCityInfoFiveDay(cityName) {\r\n    return fetch(`https://api.openweathermap.org/data/2.5/forecast/daily?q=${cityName}&units=metric&cnt=5&appid=c51223c219d6aec8cb8c5210449bd859`)\r\n        .then(res => res.json())\r\n}","import { useDispatch } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport {addCity} from '../Reducers/CityListSlice';\r\nimport { getCityInfo } from '../Helper/ApiCalls';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport '../style/searchBar.css';\r\n\r\nexport function CitySearchBar() {\r\n\r\n    const dispatch = useDispatch();\r\n    // const [value, setValue] = useState(\"\");\r\n    const [cityName, setCityName] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n    \r\n    return (\r\n        <div className=\"searchBar_container\">\r\n            <form onSubmit={handleSubmit} className=\"add_city_form\">\r\n                <input type=\"text\" className=\"add_city_textarea\" size=\"28\" value={cityName} onChange={handleChange} placeholder=\"Type City Name\"/>\r\n                <button type=\"submit\" className=\"add_city_btn\"><AddIcon /></button>\r\n            </form>\r\n\r\n            <p className={error ? 'show_error' : 'hide_error'}>Invalid city. Please enter a valid city</p>\r\n        </div>\r\n    );\r\n\r\n    function handleChange(e) {\r\n        setCityName(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        searchCity(cityName);\r\n        setCityName(\"\");\r\n    }\r\n    \r\n    function searchCity (city) {\r\n         getCityInfo(city).then((data) => {\r\n             let cityData = {\r\n                 name: data.name,\r\n                 weather: data.weather[0].main,\r\n                 temperature: (Math.round(data.main.temp) + \"C\"),\r\n             }\r\n             setError(false);\r\n             dispatch(addCity(cityData));\r\n         })\r\n         .catch(error => {\r\n             setError(true);\r\n         })\r\n     }\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState= {\r\n    weatherInfo: {},\r\n    hasDetailedData: false,\r\n};\r\n\r\n\r\nexport const weatherInfoSlice = createSlice({\r\n    name: 'weatherInfo',\r\n    initialState,\r\n\r\n   reducers: {\r\n       addWeatherInfo: (state, action) => {\r\n           state.weatherInfo = action.payload;\r\n           state.hasDetailedData = true;\r\n       }\r\n   },\r\n    \r\n});\r\n\r\nexport const { addWeatherInfo } = weatherInfoSlice.actions;\r\n\r\nexport const getWeatherInfo = (state) => state.weatherInfo.weatherInfo;\r\n\r\nexport const getWeatherInfoBool = (state) => state.hasDetailedData.hasDetailedData;\r\n\r\nexport default weatherInfoSlice.reducer;\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/rainy-5.33279b1e.svg\";","export default __webpack_public_path__ + \"static/media/thunder.9d4b81cc.svg\";","export default __webpack_public_path__ + \"static/media/rainy-1.b4604865.svg\";","export default __webpack_public_path__ + \"static/media/snowy-5.8e307665.svg\";","export default __webpack_public_path__ + \"static/media/day.e170f8f7.svg\";","export default __webpack_public_path__ + \"static/media/cloudy-day-1.c6120cb4.svg\";","import rainy from '../Icons/amcharts_weather_icons/animated/rainy-5.svg';\r\nimport thunder from '../Icons/amcharts_weather_icons/animated/thunder.svg';\r\nimport drizzle from '../Icons/amcharts_weather_icons/animated/rainy-1.svg';\r\nimport snow from '../Icons/amcharts_weather_icons/animated/snowy-5.svg';\r\nimport clear from '../Icons/amcharts_weather_icons/animated/day.svg';\r\nimport clouds from '../Icons/amcharts_weather_icons/animated/cloudy-day-1.svg';\r\n\r\n//creates data structure for a single day which includes date, day of week, temp, and weather.\r\nexport function getWeatherDayInfo(data) {\r\n    let date = new Date(data.dt * 1000);\r\n    let dayString = date.toUTCString();\r\n\r\n    let dayInfo = {\r\n        dayOfWeek: dayString.slice(0,3),\r\n        date: dayString.slice(5,7),\r\n        weather: data.weather[0].main,\r\n        temp: (Math.round(data.temp.day) + \"C\")\r\n    }\r\n    return dayInfo;\r\n}\r\n\r\n// displays an icon corresponding to the weather passed in as the argument.\r\nexport function weatherToIcon(weather) {\r\n    let icon;\r\n    switch(weather) {\r\n        case \"Thunderstorm\":\r\n            icon = <img src={thunder} height=\"100%\" alt=\"thunder icon\" />\r\n            break;\r\n        case \"Drizzle\":\r\n            icon = <img src={drizzle} height=\"100%\" alt =\"drizzle icon\"/>\r\n            break;\r\n        case \"Rain\":\r\n            icon  = <img src={rainy} height=\"100%\" alt=\"rainy icon\"/>\r\n            break;\r\n        case \"Snow\":\r\n            icon = <img src={snow} height=\"100%\" alt=\"snowy icon\"/>\r\n            break;\r\n        case \"Clear\":\r\n            icon = <img src={clear} height=\"100%\" alt=\"clear icon\"/>\r\n            break;\r\n        case \"Clouds\":\r\n            icon = <img src={clouds} height=\"100%\" alt=\"cloudy icon\"/>\r\n            break;\r\n        default:\r\n            //display the weather condition for specific conditions that don't have available svg icons.\r\n            icon = weather;\r\n            break;\r\n    }\r\n    return icon;\r\n}","import { useDispatch } from 'react-redux';\r\nimport { addWeatherInfo } from '../Reducers/WeatherInfoSlice';\r\nimport { getCityInfo, getCityInfoFiveDay } from '../Helper/ApiCalls';\r\nimport { getWeatherDayInfo, weatherToIcon } from '../Helper/HelperFunctions';\r\nimport { removeCity, refreshCityData} from '../Reducers/CityListSlice';\r\nimport { Button } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport '../style/citySimpleData.css';\r\n\r\nexport function CitySimpleData(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const city = props;\r\n\r\n    return(\r\n        <div className=\"simple_city_data\">\r\n            <Button \r\n                className=\"city_text\" \r\n                onClick={() => getCityDetailedInfo(city.name)}\r\n                style={{justifyContent:\"flex-start\", backgroundColor:\"transparent\", fontSize:\"large\"}}\r\n                disableRipple\r\n            > \r\n                {city.name} - {city.temperature} {weatherToIcon(city.weather)} \r\n            </Button>\r\n            <Button className=\"city_refresh\" size=\"small\" onClick={() => refreshCity(city.name)}><RefreshIcon /></Button>\r\n            <Button className=\"city_remove\" onClick={() => remove(city)}><ClearIcon /></Button>\r\n        </div>\r\n    )\r\n\r\n    //gets 5 days worth of weather info for given city\r\n    function getCityDetailedInfo(city) {\r\n        getCityInfoFiveDay(city)\r\n        .then(data => {\r\n            let newData = {\r\n                name: data.city.name,\r\n                currentTemp: (Math.round(data.list[0].temp.day) + \"C\"),\r\n                currentWeather: data.list[0].weather[0].main,\r\n                description: data.list[0].weather[0].description,\r\n                wind: ( Math.round(data.list[0].speed) + \"ms \" + data.list[0].deg + \" deg\"),\r\n                pressure: data.list[0].pressure,\r\n                dailyWeatherData: [],\r\n            }\r\n\r\n            //loop to create and push modified daily info to newData to be added to store.\r\n            for(let i=0; i<5; i++) {\r\n                newData.dailyWeatherData.push(getWeatherDayInfo(data.list[i]));\r\n            }\r\n            dispatch(addWeatherInfo(newData));\r\n        })\r\n    }\r\n\r\n    //refreshes the simple weather info for a given city\r\n    function refreshCity(cityName) {\r\n        getCityInfo(cityName)\r\n        .then(data => {\r\n            // creating new object to be stored in city List for display in left container.\r\n            let cityData = {\r\n                name: data.name,\r\n                weather: data.weather[0].main,\r\n                temperature: (Math.round(data.main.temp) + \"C\"),\r\n            }\r\n            dispatch(refreshCityData(cityData));\r\n        })\r\n    }\r\n\r\n    //removes a single given city from the list \r\n    function remove(city) {\r\n        dispatch(removeCity(city));\r\n    }\r\n}","import { useSelector, useDispatch } from 'react-redux';\r\nimport { getCityList, removeAll } from '../Reducers/CityListSlice';\r\nimport { CitySimpleData } from './CitySimpleData';\r\nimport { Button } from '@material-ui/core';\r\nimport '../style/cityList.css';\r\n\r\nexport function CityList() {\r\n\r\n    const dispatch = useDispatch();\r\n    const cityList = useSelector(getCityList);\r\n\r\n    return (\r\n        <div className=\"city_list_container\">\r\n            <p className=\"container_title\">Recent Locations</p>\r\n            <div className=\"city_container\">\r\n                {\r\n                    cityList.map((city, index) => {\r\n                        return (\r\n                            <CitySimpleData key={index} {...city} />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <Button onClick={removeAllCities} className=\"clear_city_btn\">Clear</Button>\r\n        </div>\r\n    );\r\n\r\n    //removes all cities from the list\r\n    function removeAllCities() {\r\n        dispatch(removeAll());\r\n    }\r\n}","import { weatherToIcon } from '../Helper/HelperFunctions';\r\nimport '../style/dailyInfo.css';\r\n\r\nexport function DailyInfo(props) {\r\n\r\n    const dailyInfo = props.dailyInfo;\r\n    \r\n    return(\r\n        <div className=\"daily_weather_info\">\r\n            <div>{dailyInfo.date}</div>\r\n            <div>{dailyInfo.dayOfWeek}</div>\r\n            <div> { weatherToIcon(dailyInfo.weather) } </div>\r\n            <div>{dailyInfo.temp}</div>\r\n        </div>\r\n    )\r\n}","import { useSelector, useDispatch } from 'react-redux';\r\nimport { getCityInfoFiveDay } from '../Helper/ApiCalls';\r\nimport { getWeatherInfo, addWeatherInfo, getWeatherInfoBool } from '../Reducers/WeatherInfoSlice';\r\nimport { DailyInfo } from './DailyInfo';\r\nimport { getWeatherDayInfo, weatherToIcon } from '../Helper/HelperFunctions';\r\nimport { Button } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport '../style/weatherInfo.css';\r\n\r\nexport function WeatherInfo() {\r\n\r\n    const dispatch = useDispatch();\r\n    const cityWeatherInfo = useSelector(getWeatherInfo);\r\n    const hasDetailedData = useSelector(getWeatherInfoBool);\r\n\r\n    // conditional render for when there is detailed data and when there isn't detailed data to render.\r\n    if(!hasDetailedData) {\r\n        return(\r\n            <div className=\"weather_info_container\"></div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"weather_info_container\">\r\n                <div className=\"refresh\">\r\n                    <Button size=\"large\" onClick={() => fetchWeatherData(cityWeatherInfo.name)}><RefreshIcon /></Button>\r\n                </div>\r\n                <h1 className=\"city_name\">{cityWeatherInfo.name}</h1>\r\n                <div className=\"detailed_city\">\r\n                    <div className=\"detailed_city_icon\">{weatherToIcon(cityWeatherInfo.currentWeather)}</div>\r\n                    <div className=\"detailed_city_info\">\r\n                        <p>{cityWeatherInfo.currentTemp}</p>\r\n                        <p>{cityWeatherInfo.description[0].toUpperCase() + cityWeatherInfo.description.substring(1)}</p>\r\n                        <p>Wind: {cityWeatherInfo.wind}</p>\r\n                        <p>Pressure {cityWeatherInfo.pressure}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"daily_weather_data\">\r\n                    {\r\n                        cityWeatherInfo.dailyWeatherData.map((dailyData, index) => {\r\n                            return (<DailyInfo key={index} dailyInfo={dailyData}/>)\r\n                        })\r\n                    }\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    //fetches new 5 day weather data and overwrites current 5 day weather data in the store.\r\n    function fetchWeatherData(city) {\r\n        getCityInfoFiveDay(city)\r\n        .then(data => {\r\n            //formatting incoming data for easy access and display to be stored in the store.\r\n            let newData = {\r\n                name: data.city.name,\r\n                currentTemp: (Math.round(data.list[0].temp.day) + \"C\"),\r\n                currentWeather: data.list[0].weather[0].main,\r\n                description: data.list[0].weather[0].description,\r\n                wind: ( Math.round(data.list[0].speed) + \"ms \" + data.list[0].deg + \" deg\"),\r\n                pressure: data.list[0].pressure,\r\n                dailyWeatherData: [],\r\n            }\r\n\r\n            //loop to create and push modified daily info to newData to be added to store.\r\n            for(let i=0; i<5; i++) {\r\n                newData.dailyWeatherData.push(getWeatherDayInfo(data.list[i]));\r\n            }\r\n            dispatch(addWeatherInfo(newData));\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport { CitySearchBar } from './Components/SearchBar';\r\nimport { CityList } from './Components/CityList';\r\nimport { WeatherInfo } from './Components/WeatherInfo';\r\nimport './style/app.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" >\r\n        <div className=\"left_container\">\r\n          <CitySearchBar />\r\n          <CityList />\r\n        </div>\r\n      <div className=\"right_container\">\r\n        <WeatherInfo />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport cityListReducer from '../Reducers/CityListSlice';\r\nimport WeatherInfoReducer from '../Reducers/WeatherInfoSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    cities: cityListReducer,\r\n    weatherInfo: WeatherInfoReducer,\r\n    hasDetailedData:WeatherInfoReducer,\r\n  },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport './style/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}